{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"msl-odt","text":""},{"location":"#overview","title":"Overview","text":"<p><code>msl-odt</code> is a Python module for creating and modifying Open Document Text (.odt) files. It provides an interface for adding formatted text, tables, lists, equations, images, and other elements to an ODT document. The module uses the <code>odfpy</code> library for Open Document file manipulation and aims to follow PEP8 conventions.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Add Text and Headings: Supports adding paragraphs, heading levels 1 and 2, and handling special characters like <code>\\t</code> and <code>\\n</code>.</li> <li>Hyperlink Detection: Automatically converts URLs (starting with <code>http://</code> or <code>https://</code>) in text to hyperlinks.</li> <li>Page Breaks: Insert page breaks for document formatting.</li> <li>Table Support: Allows creating tables with customisable column widths, table widths, borders, and optional captions.</li> <li>Figure support: Supports adding images with specified dimensions and optional captions.</li> <li>Hierarchical Lists: Add bulleted or numbered lists with optional hierarchical levels for nested lists.</li> <li>Equation Support: Add equations using Star Math 5.0 notation, with options for setting frame size and text wrapping.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p><code>msl-odt</code> is available for installation via the Python Package Index and may be installed with pip</p> <p>To install the module, using <code>pip</code>:</p> <pre><code>pip install msl-odt\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>Examples on how to use the code are available  in the <code>msl-odt</code> repository and these examples  are also included with the <code>msl-odt</code> installation in the <code>../site-packages/msl/examples/msl-odt</code>  directory of your Python interpreter.</p> <p>The examples are provided as <code>Python</code> to allow users to cut-and-paste into their own code.</p>"},{"location":"msl-odt_methods/","title":"msl-odt","text":"<p>The methods provided by the <code>msl-odt</code> package are listed below. </p> <p>A module to help write ODT documents with Python.</p>"},{"location":"msl-odt_methods/#msl.odt.odt.Document","title":"Document","text":"<pre><code>Document(filename, reopen=False)\n</code></pre> <p>               Bases: <code>object</code></p> <p>A class to create and manipulate Open Document Text (ODT) files.</p> <p>This class provides methods to add various elements to an ODT document, including headings, paragraphs, figures, equations, tables, and lists. It supports features such as converting URLs into hyperlinks, managing styles, and handling tables with optional formatting and captions.</p> <p>Attributes:</p> Name Type Description <code>filename</code> <code>Union[str, Path]</code> <p>The name of the file to create or open.</p> <code>doc</code> <code>OpenDocumentText</code> <p>The OpenDocumentText object representing the ODT document.</p> <p>Methods:</p> Name Description <code>addheading1</code> <p>Adds a Level 1 heading to the document.</p> <code>addheading2</code> <p>Adds a Level 2 heading to the document.</p> <code>addtext</code> <p>Adds a new paragraph to the document and converts URLs to hyperlinks.</p> <code>addfigure</code> <p>Adds an image to the document with an optional caption.</p> <code>addequation</code> <p>Adds a mathematical equation to the document.</p> <code>addpagebreak</code> <p>Adds a page break to the document.</p> <code>initialize_table_count</code> <p>Updates the table count if there are existing tables.</p> <code>maketabledata</code> <p>Merges multiple columns of data into a row-major list of lists for table creation.</p> <code>addtable</code> <p>Adds a table to the document with optional formatting.</p> <code>addlist</code> <p>Adds a hierarchical list to the document.</p> <code>addbulletedlist</code> <p>Adds a bulleted list to the document.</p> <code>addnumberedlist</code> <p>Adds a numbered list to the document.</p>"},{"location":"msl-odt_methods/#msl.odt.odt.Document.addbulletedlist","title":"addbulletedlist","text":"<pre><code>addbulletedlist(item_list)\n</code></pre> <p>Add a bulleted list to <code>.odt</code> document.</p> <p>See <code>addlist</code> for further options.</p> <p>Parameters:</p> Name Type Description Default <code>item_list</code> <code>List[Any]</code> <p>A list of objects representing the items to be included in the list.</p> required <p>Returns:</p> Type Description <code>None</code>"},{"location":"msl-odt_methods/#msl.odt.odt.Document.addequation","title":"addequation","text":"<pre><code>addequation(\n    math_text, math_width=None, math_height=None, wrap=False\n)\n</code></pre> <p>Add some math as a separate paragraph.</p> <p>Create an annotation using the Star Math 5.0 notation used by Open Office and others. See: wiki.openoffice.org/wiki/Documentation/      OOoAuthors_User_Manual/Writer_Guide/Math_commands_-_Reference for details on the command set.</p> <p>The annotation is put into a frame which is attached to a paragraph. The width and height arguments can be used to ensure the math displays correctly. Values for <code>math_width</code> and <code>math_height</code> can be found by creating the math in a Open Document editor and then inspecting the created <code>.xml</code> If no sizing is given the equation can still be manually resized by opening and editing the <code>.odt</code> file.</p> <p>Parameters:</p> Name Type Description Default <code>math_text</code> <code>str</code> <p>A string containing the equation in Star Math 5.0 notation. Example '\"Area\" = %pi R^2'</p> required <code>math_width</code> <code>str</code> <p>Width of the math text frame. Example: \"5.3cm\"</p> <code>None</code> <code>math_height</code> <code>str</code> <p>Height of the math text frame. Example: \"3.5cm\"</p> <code>None</code> <code>wrap</code> <code>bool</code> <p>Whether or not the surrounding text is wrapped. Default is False. Example 'wrap=True'</p> <code>False</code> <p>Returns:</p> Type Description <code>None.</code>"},{"location":"msl-odt_methods/#msl.odt.odt.Document.addfigure","title":"addfigure","text":"<pre><code>addfigure(\n    image_filename,\n    image_width,\n    image_height,\n    caption_text=None,\n)\n</code></pre> <p>Add an image to document as a separate paragraph, with optional caption.</p> <p>The image needs to be added to the <code>.odt</code> document and then as an element to a frame which is added to a paragraph, which is added to the doc. The name of the frame is set to the image filename.</p> <p>Optional caption text can be added. No auto-numbering is done so to obtain numbered figures use, e.g., caption_text='Figure 123: Desired caption text'.</p> <p>If the file does not exist text to that effect is added to the document as a placeholder.</p> <p>Parameters:</p> Name Type Description Default <code>image_filename</code> <code>str</code> <p>The image file to add to the ODT file. File name as a string, not a file handle.</p> required <code>image_width</code> <code>str</code> <p>Width of the image in the document. Example: \"8cm\"</p> required <code>image_height</code> <code>str</code> <p>Height of the image in the document. Example: \"5cm\"</p> required <code>caption_text</code> <code>Optional[str]</code> <p>Optional text added to a second paragraph as plain text. There is no auto-numbering so to obtain numbered figures use, e.g., caption_text='Figure 123: Desired caption text'.</p> <code>None</code> <p>Returns:</p> Type Description <code>None.</code>"},{"location":"msl-odt_methods/#msl.odt.odt.Document.addheading1","title":"addheading1","text":"<pre><code>addheading1(heading_text)\n</code></pre> <p>Add a Level 1 Heading to document.</p> <p>Parameters:</p> Name Type Description Default <code>heading_text</code> <code>str</code> <p>The heading text to add.</p> required <p>Returns:</p> Type Description <code>None.</code>"},{"location":"msl-odt_methods/#msl.odt.odt.Document.addheading2","title":"addheading2","text":"<pre><code>addheading2(heading_text)\n</code></pre> <p>Add a Level 2 heading to document.</p> <p>Parameters:</p> Name Type Description Default <code>heading_text</code> <code>str</code> <p>The heading text to add.</p> required <p>Returns:</p> Type Description <code>None.</code>"},{"location":"msl-odt_methods/#msl.odt.odt.Document.addlist","title":"addlist","text":"<pre><code>addlist(item_list, item_level=None, list_style=None)\n</code></pre> <p>Add a hierarchical list (bulleted or numbered) to <code>.odt</code> document.</p> <p>Parameters:</p> Name Type Description Default <code>item_list</code> <code>List[Any]</code> <p>A list of objects representing the items to be included in the list.</p> required <code>item_level</code> <code>Optional[List[int]]</code> <p>A list of integers representing the hierarchical level for each item.     If not provided, all items are at the top level (level 1).</p> <code>None</code> <code>list_style</code> <code>str</code> <p>The style of the list, either bulleted or numbered. Must be one of the two valid values: 'bullet' or 'number'. If no list_style is provided, 'bullet' is used.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>item_level</code> has fewer elements than <code>item_list</code> or if an invalid list structure is detected.</p> <code>ValueError</code> <p>If <code>list_style</code> is not 'bullet' or 'number'.</p>"},{"location":"msl-odt_methods/#msl.odt.odt.Document.addnumberedlist","title":"addnumberedlist","text":"<pre><code>addnumberedlist(item_list)\n</code></pre> <p>Add a numbered list to <code>.odt</code> document.</p> <p>See <code>addlist</code> for further options.</p> <p>Parameters:</p> Name Type Description Default <code>item_list</code> <code>List[Any]</code> <p>A list of objects representing the items to be included in the list.</p> required <p>Returns:</p> Type Description <code>None</code>"},{"location":"msl-odt_methods/#msl.odt.odt.Document.addpagebreak","title":"addpagebreak","text":"<pre><code>addpagebreak()\n</code></pre> <p>Add a pagebreak to the document.</p> <p>Add a page break by adding an empty paragraph of style  <code>afterbreakstyle</code>, which is a paragraph with specific properties (specifically a pagebreak after it).</p> <p>Returns:</p> Type Description <code>None.</code>"},{"location":"msl-odt_methods/#msl.odt.odt.Document.addtable","title":"addtable","text":"<pre><code>addtable(\n    table_data,\n    column_width=None,\n    table_width=None,\n    decimal_tab=None,\n    caption_text=None,\n    border_style=None,\n)\n</code></pre> <p>Add table with optional column or table width/s and header row.</p> <p>Table data is row-major form (rows then columns) and widths can be specified either individually or a single value for all columns or just a single table width. If no widths are specified the columns are all made as wide as possible. Additionally, numerical values (as <code>str</code>) can be aligned on the decimal point character by specifying a tab stop for that column.</p> <p>The optional caption is added to a second paragraph as plain text. There is no auto-numbering so to obtain numbered tables use, e.g., caption_text='Table 123: Desired caption text'.</p> <p>Optional border styles can be applied to the table. The default is no borders.</p> <p>See also: companion function <code>maketable_data</code> which combines multiple           arguments (columns) and merges them into a row-major           <code>list</code> of <code>list</code>s suitable for input to <code>addtable</code>.           A header row can either be a separate argument           or pre-pended as required.           E.g.: 1) <code>addtable(maketabledata(column1data,                                            column2data,                                            header_row=header_row))</code>              or 2) <code>addtable([header_row] + maketabledata(column1data,                                                           column2data))</code></p> <p>Parameters:</p> Name Type Description Default <code>table_data</code> <code>List[List[str]]</code> <p>A list of lists containing text for each row of the table. Example <code>[['User', 'Cost ($)'] ['Alice', '1.23'] ['Bob', '12.3']]</code></p> required <code>column_width</code> <code>Optional[Union[List[Union[int, float]], Union[int, float]]]</code> <p>Optional list of ints or floats specifying widths of columns (cm). If a single value is provided, it is used for all columns. Example: <code>[1, 2.3]</code> or <code>4</code>, or <code>None</code>.</p> <code>None</code> <code>table_width</code> <code>Optional[Union[int, float]]</code> <p>Optional total width of table (cm). If specified and column_width is not provided, column widths will be calculated as <code>table_width / number of columns</code>. If both column_width and table_width are provided column_width will be used and a warning generated. Example: <code>3.2</code></p> <code>None</code> <code>decimal_tab</code> <code>Optional[List[Optional[Union[float, int]]]]</code> <p>Optional list of floats specifying the position (cm) of the decimal tab stop for each column from the left column margin. If a column does not require a tab stop, use None. Example: <code>[None, 1.23, 2]</code></p> <code>None</code> <code>caption_text</code> <code>Optional[str]</code> <p>Optional text added to a second paragraph as plain text. There is no auto-numbering so to obtain numbered figures use, e.g., <code>caption_text='Figure 123: Desired caption text'</code>.</p> <code>None</code> <code>border_style</code> <code>Optional[str]</code> <p>Optional text specifying what borders to draw on the table. Currently, \"None\", \"Header Row\" or \"All\". Default is None. Note: The <code>MSL Style Manual</code> prefers \"Header Row\".</p> <code>None</code> <p>Returns:</p> Type Description <code>None.</code>"},{"location":"msl-odt_methods/#msl.odt.odt.Document.addtext","title":"addtext","text":"<pre><code>addtext(text)\n</code></pre> <p>Add a new paragraph to document.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to add. The use of <code>\\t</code> and <code>\\n</code> are supported. Uses ODFPY <code>teletype</code> function to handle whitespace. Detects URLs starting with <code>http://</code> or <code>https://</code> and converts them to hyperlinks.</p> required <p>Returns:</p> Type Description <code>None.</code>"},{"location":"msl-odt_methods/#msl.odt.odt.Document.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Save and close file</p> <p>Returns:</p> Type Description <code>None.</code>"},{"location":"msl-odt_methods/#msl.odt.odt.Document.define_styles","title":"define_styles","text":"<pre><code>define_styles()\n</code></pre> <p>Define styles for odt document.</p>"},{"location":"msl-odt_methods/#msl.odt.odt.Document.initialize_table_count","title":"initialize_table_count","text":"<pre><code>initialize_table_count()\n</code></pre> <p>Update <code>table_count</code> if there are any existing tables.</p> <p>Each table has a unique style named based on the table count. When appending to a document it is necessary to first count  existing tables to ensure styles of any new tables do not overwrite previous table styles.</p> <p>Returns:</p> Type Description <code>None.</code>"},{"location":"msl-odt_methods/#msl.odt.odt.Document.maketabledata","title":"maketabledata","text":"<pre><code>maketabledata(*args, header_row=None)\n</code></pre> <p>Merge variables (columns) into row-major list of lists for table creation.</p> <p>Each column (variable) is provided as a separate argument, which can be a <code>list</code>, <code>numpy</code> array, or any iterable. Formats <code>float</code> or <code>int</code> items to <code>str</code>.</p> <p>For more precise formatting, convert data to <code>str</code> before calling     e.g.: <code>[f'{i:0.2f} for i in my_variable]</code> <code>[f'{i:0.4E} for i in my_variable]</code>           etc.</p> <p>An optional header row can be supplied as the last argument. It must be supplied as a keyword argument e.g.:     <code>maketabledata(col1, col2, header_row=['Name', 'Age'])</code></p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Iterable[Any]</code> <p>Variable number of iterables (e.g., <code>list</code>s, <code>numpy</code> arrays etc.), each representing a column. Raises error if iterables have different lengths.</p> <code>()</code> <code>header_row</code> <code>Optional[List[str]]</code> <p>Optional list of labels for header row. Must be given as a keyword argument e.g.     <code>table_data = maketabledata(column1data,                                 column2data,                                 header_row=headerrowdata)</code> Default is <code>None</code>, which means only column data are provided. In this case the header row can be prepended e.g.:     <code>table_data = [headerrowdata] + maketabledata(column1data,                                                   column2data)</code></p> <code>None</code> <p>Returns:</p> Type Description <code>list of list : Row-major data where each inner list                        represents a row of the table.</code>"},{"location":"msl-odt_methods/#msl.odt.odt.Document.save","title":"save","text":"<pre><code>save()\n</code></pre> <p>Save file</p> <p>Returns:</p> Type Description <code>None.</code>"},{"location":"about/license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2024, Measurement Standards Laboratory of New Zealand\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"about/release-notes/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"about/release-notes/#10-2024-12-18","title":"[1.0] - 2024-12-18","text":""},{"location":"about/release-notes/#added","title":"Added","text":"<ul> <li>Initial release of the <code>msl-odt</code> PyPi module.</li> <li>Basic functionality for reading and writing to <code>.odt</code> files.</li> </ul>"},{"location":"about/release-notes/#changed","title":"Changed","text":"<ul> <li>[2020] Initial stand-alone development</li> <li>[2024 August] Add <code>mathHeight</code> parameter to <code>addequation()</code></li> <li>[2024 September]<ul> <li>Add tables, minor formatting, and table creation utility</li> <li>Add warnings for problematic parameters</li> <li>Modify to use PEP8 case convention (lowercase or snake_case)</li> </ul> </li> <li>[2024 November]<ul> <li>Develop tests and example files</li> <li>Configure for <code>PyPi</code> and <code>Github</code></li> </ul> </li> </ul>"},{"location":"about/release-notes/#fixed","title":"Fixed","text":"<ul> <li>Initial stand-alone version had issues with hyperlinks in <code>addtext()</code>. Fixed to properly format detected URLs as clickable links in the <code>.odt</code> document</li> <li>Appending to existing document required an additional utility function to read existing styles for previous tables so new table styles didn't overwrite or conflict with them.</li> </ul>"},{"location":"about/release-notes/#deprecated","title":"Deprecated","text":"<ul> <li>None at this time.</li> </ul>"},{"location":"about/release-notes/#removed","title":"Removed","text":"<ul> <li>None at this time.</li> </ul>"},{"location":"about/release-notes/#unreleased","title":"[Unreleased]","text":""},{"location":"about/release-notes/#added_1","title":"Added","text":"<ul> <li>Enhancements for richer text formatting, e.g. bold, italic, etc. in paragraphs</li> </ul>"},{"location":"about/release-notes/#changed_1","title":"Changed","text":"<ul> <li>Improve <code>addtext()</code> to support different link formats, e.g. email addresses</li> <li>Refactor code to improve modularity</li> <li>Extend test coverage</li> </ul>"},{"location":"examples/msl-odt_append/","title":"Appending files","text":"<p>Example python code for appending files.</p> <pre><code># pylint: disable=C0103\n\"\"\" Example of using odt.py to append.\n    Add new tables to an existing document\n    Such as that created by example_msl-odt_tables.py\n\"\"\"\ntry:\n    from msl.odt import Document\nexcept ImportError as error:\n    raise ImportError(\"msl-odt module is not installed. \"\n                      \"Please install it first.\") from error\nfrom pathlib import Path\nfrom shutil import copy\n\nsource_filename = Path(\"example_msl-odt_readme.odt\")  # The source file\nassert source_filename.exists(), \"example_msl-odt_readmme.odt does not exist.\"\nfilename = Path(\"example_msl-odt_append.odt\")  # Filename for append\ncopy(source_filename, filename)\n\ndoc = Document(filename, reopen=True)\n\n# Table data\nheader_row = ['Name', 'Age', 'Town']\nname = ['Data', 'Ego', 'Foxtrot']\nage = [40.567, 0.45678, 456]\ntown = ['Dubbo', 'Pitcairn Is.', 'Mosgiel']\n\ntable_data = [header_row] + doc.maketabledata(name, age, town)\n# Or alternatively\ntable_data = doc.maketabledata(name, age, town, header_row=header_row)\n\ndoc.addpagebreak()\ndoc.addheading1('Appending tables with odt.py')\ndoc.addtext('This document shows how to append additional tables '\n            'using the \"reopen=True\" option in odt.py\\n'\n            'First, open a document for appending. '\n            'E.g. doc=Document(filename, reopen=True)\\n'\n            'Then add tables using doc.addtable()\\n'\n            'See example_msl-odt_tables.py for other examples.'\n            )\ndoc.addheading2('Example 1')\ndoc.addtext('Individual column widths with decimal tab stop on second column')\ndoc.addtext('doc.addtable(table_data, column_width=[3, 4.0, 5.5], \\n'\n            '\\tdecimal_tab=[None, 0.7, None], \\n'\n            '\\tborder_style=\"All\")')\ndoc.addtable(table_data, column_width=[3, 4.0, 5.5],\n             decimal_tab=[None, 0.7, None],\n             border_style=\"All\")\ndoc.addtext('Note: decimal tab needs to be large enough for numbers to align.\\n')\n\ndoc.addheading2('Example 2')\ndoc.addtext('Single column width with decimal tab stop on second column')\ndoc.addtext('doc.addtable(table_data, column_width=5.5, \\n'\n            '\\tdecimal_tab=[None, 1.1, None], \\n'\n            '\\tborder_style=\"Header row\")')\ndoc.addtable(table_data, column_width=5.5,\n             decimal_tab=[None, 1.1, None],\n             border_style=\"Header row\")\ndoc.addtext(f'Note: default cell text padding is {doc.tablecellpadding}.\\n')\n\ndoc.addheading2('Example3')\ndoc.addtext('Total table width with no decimal tabs or borders')\ndoc.addtext('doc.addtable(table_data, table_width=14)')\ndoc.addtable(table_data, table_width=14)\ndoc.addtext('Note: table width needs to be sufficient or text will wrap.\\n'\n            'Further details can be found in odt.py')\n</code></pre>"},{"location":"examples/msl-odt_figures/","title":"Figures","text":"<p>Example python code for adding figures.</p> <pre><code># pylint: disable=C0103\n\"\"\"Example of using odt.py to write figures.\"\"\"\ntry:\n    from msl.odt import Document\nexcept ImportError as error:\n    raise ImportError(\"msl-odt module is not installed. \"\n                      \"Please install it first.\") from error\n\nFILENAME = \"example_msl-odt_figures.odt\"\n\ndoc = Document(FILENAME, reopen=False)\n\ndoc.addheading1('Adding figures with odt.py')\n\ndoc.addtext('This document shows how to add figures to an '\n            'Open Document Foundation text document using the odt module.\\n'\n            'odt is a wrapper for, and therefore requires, the odfpy module. '\n            'odfpy can be installed with \"python pip install odfpy\".\\n\\n'\n            )\n\ndoc.addheading2('Adding figures')\ndoc.addtext('Using odt and Python to write out Open Document (.odt) files '\n            'with figures is straightforward. In Python, first import the '\n            'module with \"from msl.odt import Document\", next open a document '\n            'with, e.g., \"doc=Document(my_odt_file)\".')\ndoc.addtext('The primary function for adding images in odt is '\n            'addfigure() which takes arguments:')\n\nparameter_list = [    # NOTE: change if odt.py code changes\n    \"image_filename of type: str Default value: Required\",\n    \"image_width of type: str Default value: Required\",\n    \"image_height of type: str Default value: Required\",\n    \"caption_text of type: Optional[str] Default value: None\"\n]\ndoc.addbulletedlist(parameter_list)\ndoc.addtext('and would be called as, e.g., '\n            'doc.addfigure(image_file, \"5cm\", \"7cm\") or \\n'\n            'doc.addfigure(image_file, image_width=image_width, '\n            'image_height=image_height), \\n'\n            'where image_file, image_width and '\n            'image_height are variables of type: str.\\n')\n\ndoc.addheading2('Example images')\nTESTCARD_1 = 'Sweden_TV1_colour_1969.png'\nTESTCARD_2 = 'PM5544_with_non-PAL_signals.png'\n\ndoc.addtext('The following images are publicly available:')\ndoc.addnumberedlist([\n    'htps://commons.wikimedia.org/wiki/File:Sweden_TV1_colour_1969.png',\n    'https://commons.wikimedia.org/wiki/File:PM5544_with_non-PAL_signals.png'])\ndoc.addtext('and will be used as the test images in this document and ')\ndoc.addtext('will be labelled \"TESTCARD_1\" and \"TESTCARD_2\" in the examples below.')\ndoc.addtext('See over the page - pagebreak created using doc.addpagebreak() - '\n            'for examples.')\ndoc.addpagebreak()\n\ndoc.addheading2('Example 1')\ndoc.addtext('Basic figure addition:')\ndoc.addtext('doc.addfigure(TESTCARD_1, \"7cm\", \"5cm\")')\ndoc.addfigure(TESTCARD_1, \"7cm\", \"5cm\")\ndoc.addtext('Note: no caption\\n')\n\ndoc.addheading2('Example 2')\nimage_width = '8cm'\nimage_height = '8cm'\ncaption_text = 'Figure 2. The PM5544 test card'\ndoc.addtext('Figure addition with caption:')\ndoc.addtext('doc.addfigure(TESTCARD_2,\\n'\n            '\\timage_width=image_width,\\n'\n            '\\timage_height=image_height,\\n'\n            '\\tcaption_text=caption_text)')\ndoc.addfigure(TESTCARD_2,\n              image_width=image_width,\n              image_height=image_height,\n              caption_text=caption_text)\ndoc.addtext('where:')\ndoc.addbulletedlist([f'image_width=\"{image_width}\"',\n                     f'image_height=\"{image_height}\"',\n                     f'caption_text=\"{caption_text}\"'])\ndoc.addtext('Note: addfigure() does not do automatic numbering or labelling '\n            'of captions.')\n</code></pre>"},{"location":"examples/msl-odt_introduction/","title":"Introduction","text":"<p>Example python code for basic text.</p> <pre><code>#pylint: disable=C0103\n\"\"\"Example of using odt.py to write basic text.\"\"\"\nimport inspect # to get a list of functions in odt\ntry:\n    from msl.odt import Document\nexcept ImportError as error:\n    raise ImportError(\"msl-odt module is not installed. \"\n                      \"Please install it first.\") from error\nFILENAME = \"example_msl-odt_introduction.odt\"\n\ndoc = Document(FILENAME, reopen=False)\n\ndoc.addheading1('Creating a basic text document with odt.py')\n\ndoc.addtext('This document shows how to add simple text to an '\n            'Open Document Foundation text document using the odt module.\\n'\n            'odt is a wrapper for, and therefore requires, the odfpy module. '\n            'Which can be installed with \"python pip install odfpy\".\\n\\n'\n            )\n\ndoc.addheading2('Open Document Foundation text')\ndoc.addtext('An .odt file is simply a renamed zip file containing .xml code '\n            'which various editors can display in a human-readable form. '\n            'This can be seen by renaming a .odt file with a .zip extension. '\n            'If the file is opened with a suitable archive program it will '\n            'contain a \"content.xml\" file along with other items, all of '\n            'which together can be processed by a document editor to give a '\n            'human-readable text.\\n'\n            'This is different to, e.g., LaTeX where the text document is '\n            'usually \"compiled\" to produce the final formatted document, '\n            'e.g. a .pdf file.\\n '\n            'While LaTeX is an extremely capable document creation system, '\n            'more WYSIWIG (What You See Is (mostly) What You Get) editors '\n            'such as Word, Google Docs or open source ones like Apache '\n            'Open Office or LibreOffice can work with .odt files.\\n')\ndoc.addheading2('Available functions')\ndoc.addtext('The following functions are available in odt:')\n# Get a list of all the addXYZ() functions in odt module\nodtclass = doc.__class__\n# Filter for functions that start with 'add'\nadd_functions = [name for name, func in \\\n                 inspect.getmembers(odtclass, inspect.isfunction) \\\n                     if name.startswith('add')]\ndoc.addlist(add_functions,list_style='bullet')\n\ndoc.addtext('\\n\\n')\ndoc.addheading2(\"Using functions\")\ndoc.addtext('Using odt and Python to write out Open Document (.odt) files '\n            'is straightforward. In Python, first import the module with '\n            '\"from msl.odt import Document\", next open a document with, e.g., '\n            '\"doc=Document(my_odt_file)\". Then call the functions available on \"doc\" '\n            '(see list above). E.g. the following page break is created with '\n            '\"doc.addpagebreak()\"')\ndoc.addpagebreak()\n\ndoc.addheading2('Adding text')\ndoc.addtext('The addtext() and other functions usually create new paragraphs. '\n            'The input to addtext() can be formatted using escape sequences '\n            'such as \"\\\\n\" (Newline) and \"\\\\t\" (Horizontal tab). E.g. '\n            'this text \"Lorem ipsum \\\\n\\\\tDolor sit amet \\\\n\\\\tConsecuter '\n            '\\\\nAdipisci \\\\n\\\\nElit, sed.\" produces:'\n            )\ndoc.addtext('Lorem ipsum \\n\\tDolor sit amet \\n\\tConsecuter '\n            '\\nAdipisci \\n\\nElit, sed.')\ndoc.addtext('\\n')\n\ndoc.addheading2('Adding the rest')\ndoc.addtext('For examples of how to add Equations, Figures, Tables and Lists, '\n            'using Python and the msl-odt module, see the other example scripts.')\n</code></pre>"},{"location":"examples/msl-odt_lists/","title":"Lists","text":"<p>Example python code for adding lists.</p> <pre><code># pylint: disable=C0103\n# noqa: E131, E262\n\"\"\"Example of using odt.py to create lists.\"\"\"\ntry:\n    from msl.odt import Document\nexcept ImportError as error:\n    raise ImportError(\"msl-odt module is not installed. \"\n                      \"Please install it first.\") from error\n\ndoc = Document(\"example_msl-odt_lists.odt\")\n\n# List data - showing indentation\nitem_list = (\n    \"Cats\",\n        \"Domestic Shorthair\",  # noqa: E131\n        \"Domestic Longhair\",\n        \"Purebred\",\n            \"Russian Blue\",\n            \"Siamese\",\n                \"Seal Point\",\n                \"Flame Point\",\n    \"Dogs\",\n        \"Retrievers\",\n            \"Golden Retriever\",\n            \"Labrador Retriever\",\n        \"Poodles\",\n            \"Toy Poodle\",\n            \"Standard Poodle\"\n)\n\n# Corresponding levels; set to None for level 1 for all items (e.g. below)\nitem_level = [\n    1,  # \"Cats\"\n    2,  #     \"Domestic Shorthair\"     noqa: E262\n    2,  #     \"Domestic Longhair\"      noqa: E262\n    2,  #     \"Purebred\"               noqa: E262\n    3,  #         \"Russian Blue\"       noqa: E262\n    3,  #         \"Siamese\"            noqa: E262\n    4,  #             \"Seal Point\"     noqa: E262\n    4,  #             \"Flame Point\"    noqa: E262\n    1,  # \"Dogs\"\n    2,  #     \"Retrievers\"             noqa: E262\n    3,  #         \"Golden Retriever\"   noqa: E262\n    3,  #         \"Labrador Retriever\" noqa: E262\n    2,  #     \"Poodles\"                noqa: E262\n    3,  #         \"Toy Poodle\"         noqa: E262\n    3   #         \"Standard Poodle\"    noqa: E262\n]\n\ndoc.addheading1('Adding lists with odt.py')\ndoc.addtext('This document shows how to add lists using the addlist() '\n            'function in odt.py and the two helper functions:\\n'\n            '\\taddbullettedlist() and\\n'\n            '\\taddnumberedlist()\\n'\n            'which do simple single-level lists.'\n            'First, open a document. '\n            'E.g. doc=Document(\"example_msl-odt_lists.odt\")\\n'\n            'In Python, lists are added with doc.addlist(), '\n            'doc.addbulletedlist() or doc.addnumberedlist().\\n'\n            'List data is simply a list containing any types of data which '\n            'can be written as text into the document.\\n')\n\ndoc.addheading2('Example 1')\ndoc.addtext('Basic bulleted list')\ndoc.addtext('doc.addbulletedlist(item_list)')\ndoc.addbulletedlist(item_list)\ndoc.addtext('Note 1: all items at top level.')\ndoc.addtext('Note 2: equivalent to doc.addlist(item_list, '\n            'item_level=None, list_style=\"bullet\").\\n')\ndoc.addheading2('Example 2')\ndoc.addtext('Basic numbered list')\ndoc.addtext('doc.addnumberedlist(item_list)')\ndoc.addnumberedlist(item_list)\ndoc.addtext('Note 1: all items at top level.')\ndoc.addtext('Note 2: equivalent to doc.addlist(item_list, '\n            'item_level=None, list_style=\"number\").\\n')\ndoc.addheading2('Example 3')\ndoc.addtext('Bulleted list with sub-levels')\ndoc.addtext('doc.addlist(item_list, '\n            'item_level=item_level, list_style=\"bullet\")')\ndoc.addlist(item_list, item_level=item_level, list_style=\"bullet\")\ndoc.addtext('Note: uses Open Office default bullet labels and indent.\\n')\n\ndoc.addheading2('Example 4')\ndoc.addtext('Numbered list with sub-levels')\ndoc.addtext('doc.addlist(item_list, '\n            'item_level=item_level, list_style=\"number\")')\ndoc.addlist(item_list, item_level=item_level, list_style=\"number\")\ndoc.addtext('Note: uses Open Office default indent '\n            'and number format for labels.\\n')\n\n# Add a pagebreak\ndoc.addpagebreak()\ndoc.addheading2('Example 5')\ndoc.addtext('The Default')\ndoc.addtext('doc.addlist(item_list)')\ndoc.addlist(item_list)\ndoc.addtext('Note: equivalent to doc.addlist(item_list, '\n            'item_level=None, list_style=None).\\n')\n</code></pre>"},{"location":"examples/msl-odt_math/","title":"Math","text":"<p>Example python code for basic equations.</p> <pre><code>#pylint: disable=C0103\n\"\"\"Example of using odt.py to write equations.\"\"\"\ntry:\n    from msl.odt import Document\nexcept ImportError as error:\n    raise ImportError(\"msl-odt module is not installed. \"\n                      \"Please install it first.\") from error\n\nFILENAME = \"example_msl-odt_math.odt\"\n\ndoc = Document(FILENAME, reopen=False)\n\ndoc.addheading1('Adding equations with odt.py')\n\ndoc.addtext('This document shows how to add equations to an '\n            'Open Document Foundation text document using the odt module.\\n'\n            'odt is a wrapper for, and therefore requires, the odfpy module. '\n            'odfpy can be installed with \"python pip install odfpy\".\\n'\n            )\n\ndoc.addheading2('Adding equations')\ndoc.addtext('Using odt and Python to write out Open Document (.odt) files '\n            'with equations is straightforward. In Python, first import the '\n            'module with \"from msl.odt import Document\", next open a document '\n            'with, e.g., \"doc=Document(my_odt_file)\".')\ndoc.addtext('The primary function for adding mathematical equations in odt is '\n            'addequation() which takes arguments:')\n\nparameter_list = [  # NOTE: change if odt.py code changes\n    \"math_text of type: str Default value: Required\",\n    \"math_width of type: Optional[str] Default value: None\",\n    \"math_height of type: Optional[str] Default value: None\",\n    \"wrap of type: Optional[bool] Default value: False\"\n    ]\ndoc.addbulletedlist(parameter_list)\ndoc.addtext('and would be called as, e.g., '\n            'doc.addequation(equation_string, \"5cm\", \"7cm\") or \\n'\n            'doc.addfigure(equation_string, image_width=image_width, '\n            'image_height=image_height), \\n'\n            'where image_file, image_width and '\n            'image_height are variables of type: str.\\n')\n\ndoc.addheading2('Equation syntax and sizing')\ndoc.addtext('The format for the equation_string input follows the '\n            'Star Math 5.0 notation used by Open Office and others. See:\\n'\n            'https://wiki.openoffice.org/wiki/Documentation/'\n            'OOoAuthors_User_Manual/Writer_Guide/Math_commands_-_Reference \\n'\n            'for details on the command set.\\n'\n            'The syntax is not too dissimilar to LaTex syntax for math.\\n'\n            'A few useful points:')\ndoc.addbulletedlist([\n            'In general, Greek letters are specified as %letter for lower '\n            'case and %LETTER for upper case. E.g. %alpha and %OMEGA.',\n            'Most characters will be italicised, as usual for equation text, '\n            'to use normal text surround it with \\'\"\\' characters. '\n            'E.g. \"Some non-italics text\".',\n            'To group operators or operations, e.g. for a fraction which '\n            'is specified as numerator over denominator, enclose items in '\n            'braces \\'{ }\\'. E.g. {a+b+c} over {e+f+g}',\n            'Superscripts are signified with the \\'^\\' character and '\n            'subscripts with the \\'_\\' character. E.g. the area of a circle '\n            'would be specified as \"%pi times r^3\" where r is the radius',\n            'Stacking of equations can either be done \\'manually\\' - by '\n            'by adding in the required spaces or using either the '\n            '\\'stack\\' or \\'matrix\\' options. See the examples in the '\n            'Open Office wiki.'])\ndoc.addtext('\\nThe width and height arguments can be used to ensure the math '\n            'displays correctly. Values for math_width and math_height can be '\n            'found by creating the math in a Open Document editor and then '\n            'inspecting the created .xml\\n\\n'\n            'Note 1: if no sizing is provided, or if the sizing is wrong, '\n            'the equation will still be written. '\n            'It is possible to manually resize equations to the minimum '\n            'required size by opening the .odt file in Apache Open Office '\n            'and double-clicking the equation. This opens the equation editor '\n            'and after closing this and returning to the main .odt document '\n            'the equation will now be right-sized. The edited document can '\n            'then be manually saved.\\n\\n'\n            'Note 2: equations are written \"inline\" by default to allow them '\n            'to be included in sentences. To ensure text is written on the '\n            'line after the equation use \"wrap=True\" in addequation().')\ndoc.addpagebreak()  # For formatting\ndoc.addheading2('Example 1')\nequation = '\"Area\" = %pi R^2'  # The equation string\ndoc.addtext('Basic equations with text wrapping:')\ndoc.addtext(f\"doc.addequation('{equation}', '5cm', '3cm', wrap=True)\")\ndoc.addequation(equation, '5cm', '5cm', wrap=True)\ndoc.addtext('Note: estimated sizing and text wrapping\\n'\n            'With no applied sizing:')\ndoc.addtext(f\"doc.addequation('{equation}', wrap=True)\")\ndoc.addequation(equation, wrap=True)\ndoc.addtext('Note 1: no sizing\\n'\n            'Note 2: double-clicking on the above equation in Apache '\n            'Open Office will open the equation editor. When this is closed '\n            'and focus returns to the main document the frame containing the '\n            'equation will be auto-resized to a minimum bounding box.\\n'\n            'With no height applied:')\ndoc.addtext(f\"doc.addequation('{equation}', math_width=\\\"4cm\\\", wrap=True)\")\ndoc.addequation(equation, math_width=\"4cm\", wrap=True)\ndoc.addtext('Note 1: height wrong? '\n            'As before, double-clicking the equation, then exiting the '\n            'equation editor will cause the frame surrounding the equation to '\n            'be auto-resized.\\n')\n\ndoc.addpagebreak()  # For formatting\ndoc.addheading2('Example 2')\ndoc.addtext('To create stacked equations it is generally easiest to use '\n            'either the \\'stack\\' or \\'matrix\\' options. When using '\n            '\\'stack\\' to align equations the \\'phantom\\' command is '\n            'to make subsequent left hand side variables invisible.\\n'\n            'Example using \\'matrix\\':')\nmatrix_align = '''matrix{\na # \"=\" # alignl{b} ##\n{} # \"=\" # alignl{c+1}\n}'''\ndoc.addequation(matrix_align, math_width=\"2.6cm\", math_height=\"1.4cm\",\n                wrap=True)  # sizing obtained by inspecting doc and re-running\ndoc.addtext('is produced from the math code\\n'\n            f'{matrix_align}\\n'\n            'Example using \\'stack\\':')\nstack_align = '''stack{\nalignl{a} = b #\nalignl{phantom{a} = c+1}\n}'''\ndoc.addequation(stack_align, math_width=\"1.9cm\", math_height=\"1.3cm\",\n                wrap=True)  # sizing obtained by inspecting doc and re-running\ndoc.addtext('is produced from the math code\\n'\n            f'{stack_align}\\n\\n'\n            'See:\\n'\n            'https://wiki.openoffice.org/wiki/Documentation/'\n            'OOoAuthors_User_Manual/Writer_Guide/Math_commands_-_Reference \\n'\n            'for further details on the full command set.\\n')\n</code></pre>"},{"location":"examples/msl-odt_tables/","title":"Tables","text":"<p>Example python code for adding tables.</p> <pre><code>#pylint: disable=C0103\n\"\"\"Example of using odt.py to create tables.\"\"\"\ntry:\n    from msl.odt import Document\nexcept ImportError as error:\n    raise ImportError(\"msl-odt module is not installed. \"\n                      \"Please install it first.\") from error\n\ndoc = Document(\"example_msl-odt_tables.odt\")\n\n# Table data\nheader_row = ['Name', 'Age', 'Town']\nname = ['Alice', 'Bobby', 'Charlise']\nage = [30.123, 0.123456, 123]\ntown = ['Hell', 'Belmont', 'Longyearbyen']\n\n# Note: IDE will give error as doc undefined until runtime\ntable_data = [header_row] + doc.maketabledata(name, age, town)\n# Or alternatively\ntable_data = doc.maketabledata(name, age, town, header_row=header_row)\n\ndoc.addheading1('Adding tables with odt.py')\ndoc.addtext('This document shows how to add tables using the addtable() '\n            'function in odt.py\\n'\n            'First, open a document. E.g. doc=Document(\"example_msl-odt_tables.odt\")\\n'\n            'Tables are added with doc.addtable()\\n'\n            '\\nOpen Document tables are written row-by-row. '\n            'The helper function maketabledata() can be used to combine '\n            'column variables, and an optional header row, into a suitable '\n            'format for use with addtable().\\n'\n            'E.g.: doc.addtable(maketabledata(col1data, col2data, '\n            'header_row=[\"col1label\", \"col2label\"]))\\n'\n            )\n\ndoc.addheading2('Example 1')\ndoc.addtext('Individual column widths with decimal tab stop on second column')\ndoc.addtext('doc.addtable(table_data, column_width=[3.5, 4.0, 5],\\n'\n            '\\tdecimal_tab=[None, 0.4, None],\\n'\n            '\\tborder_style=\"Header row\")')\ndoc.addtable(table_data, column_width=[3.5, 4.0, 5],\n             decimal_tab=[None, 0.4, None],\n             border_style=\"Header row\")\n\ndoc.addtext('Note: decimal tab stop too small, numbers not aligned.\\n')\n\ndoc.addheading2('Example 2')\ndoc.addtext('Single column width with decimal tab stop on second column')\ndoc.addtext('doc.addtable(table_data, column_width=4.5,\\n'\n            '\\tdecimal_tab=[None, 1.1, None],\\n'\n            '\\tborder_style=\"All\")')\ndoc.addtable(table_data, column_width=4.5,\n             decimal_tab=[None, 1.1, None],\n             border_style=\"All\")\ndoc.addtext(f'Note: default cell text padding is {doc.tablecellpadding}.\\n')\n\ndoc.addheading2('Example3')\ndoc.addtext('Total table width with no decimal tabs or borders')\ndoc.addtext('doc.addtable(table_data, table_width=3)')\ndoc.addtable(table_data, table_width=3)\ndoc.addtext('Note: column width too small, text wrapped.\\n'\n            'Further details can be found in odt.py')\n</code></pre>"}]}