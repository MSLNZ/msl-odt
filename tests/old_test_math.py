# pylint: disable=C0116
"""
Test Module for Open Document (.odt) Math example

This module contains tests to ensure that the Open Document files generated by
the `example_msl-odt_math.py` script match the expected output file,
`example_msl-odt_math.odt`, located in the `expected_outputs` directory.

The tests focus on the following aspects:
- The correct creation of `example_msl-odt_math.odt` by running the
  `example_msl-odt_math.py` script.
- Comparison of number of text elements in the generated and expected files.
- Comparison of the text content between the generated and expected files.
- Verification of metadata (title and creator) between the two files.

Setup Process:
--------------
The test module utilises a pytest fixture to run the
`example_msl-odt_math.py` script before any tests are executed.
This fixture:
- Runs the script to create `example_msl-odt_math.odt`
  in the same directory as the script.
- Ensures the file has been created successfully.
- Cleans up by deleting the generated `example_msl-odt_math.odt`
  after all tests have run.

Test Cases:
-----------
- test_text_elements_count: Asserts that the number of text elements in the
  generated and expected files are the same.
- test_text_content_equality: Compares the content of corresponding text
  elements in both files and asserts that they are identical.
- test_metadata: Validates that the title and creator metadata in both files
  match.

Usage:
------
Run the tests using pytest:
```bash
pytest path/to/your/test_file.py
"""

import subprocess
from pathlib import Path
from os import environ
from odf.opendocument import load
from odf.text import P as Paragraph
from odf.meta import InitialCreator, UserDefined
import pytest

# Directory paths
# Directory where this test file lives. Should be tests
BASE_DIR = Path(__file__).resolve().parent
# Path to directory with creation script
SCRIPT_DIR = BASE_DIR / "../src/msl/examples/odt"
# Directory for expected output
EXPECTED_OUTPUTS_DIR = BASE_DIR / "expected_outputs"
# Test file creation script
SCRIPT_FILE = SCRIPT_DIR / "example_msl-odt_math.py"
# Test file created
TEST_FILE = SCRIPT_DIR / "example_msl-odt_math.odt"
# Expected output file
EXPECTED_FILE = EXPECTED_OUTPUTS_DIR / "example_msl-odt_math.odt"

# Run the script to create example_msl-odt_math.odt at the start


@pytest.fixture(scope="module", autouse=True)
def setup_test_file():
    cleanup = True  # Delete created .odt files when finished

    # Run the example script with the modified environment
    try:
        # Copy the current environment and set PYTHONPATH using pathlib
        env = environ.copy()
        env["PYTHONPATH"] = str(Path(__file__).resolve().parent.parent / "src")
        subprocess.run(
            ["python", str(SCRIPT_FILE)],
            cwd=str(SCRIPT_DIR),
            env=env,
            check=True,
            text=True,
            capture_output=True
        )
    except subprocess.CalledProcessError as e:
        print("Subprocess failed with return code:", e.returncode)
        print("Output:", e.output)
        print("Error:", e.stderr)
        raise

    # Check that the file was created
    assert TEST_FILE.exists(), f"{TEST_FILE} does not exist."
    yield  # This generator means that after all tests we clean up

    # Cleanup after all tests
    if TEST_FILE.exists() and cleanup:
        TEST_FILE.unlink()  # Delete the test file


def test_text_elements_exist():
    if not EXPECTED_FILE.exists():
        pytest.skip("Skipping test_text_elements_exist: file not found.")
    # Load generated document
    doc2 = load(EXPECTED_FILE)

    # Check number of text elements
    content2 = doc2.getElementsByType(Paragraph)
    assert content2, "No paragraph elements in golden document."


def test_text_elements_generated():
    if not TEST_FILE.exists():
        pytest.skip("Skipping test_text_elements_generated: file not found.")
    # Load generated document
    doc1 = load(TEST_FILE)

    # Check number of text elements
    content1 = doc1.getElementsByType(Paragraph)
    assert content1, "No paragraph elements in generated document."


def test_text_elements_count():
    if not TEST_FILE.exists():
        pytest.skip("Skipping test_text_elements_count: "
                    "test file not found.")
    if not EXPECTED_FILE.exists():
        pytest.skip("Skipping test_text_elements_count: "
                    "golden file not found.")
    # Load both documents
    doc1 = load(TEST_FILE)
    doc2 = load(EXPECTED_FILE)

    # Check number of text elements
    num_para1 = len(doc1.getElementsByType(Paragraph))
    num_para2 = len(doc2.getElementsByType(Paragraph))
    assert num_para1 == num_para2, "Different numbers of Paragraphs. "\
        "Test: {num_para2} != Expected: {num_para2}"


def test_text_content_equality():
    if not TEST_FILE.exists():
        pytest.skip("Skipping test_text_elements_count: "
                    "test file not found.")
    if not EXPECTED_FILE.exists():
        pytest.skip("Skipping test_text_elements_count: "
                    "golden file not found.")
    # Load both documents
    doc1 = load(TEST_FILE)
    doc2 = load(EXPECTED_FILE)

    # Compare text content
    content1 = doc1.getElementsByType(Paragraph)
    content2 = doc2.getElementsByType(Paragraph)
    if not len(content1) == len(content2):
        pytest.skip("Skipping test_text_content_equality: "
                    "files are different.")

    for elem1, elem2 in zip(content1, content2):
        text1 = ''.join(node.data for node in elem1.childNodes
                        if node.nodeType == node.TEXT_NODE)
        text2 = ''.join(node.data for node in elem2.childNodes
                        if node.nodeType == node.TEXT_NODE)
        assert text1 == text2, "Text content differs between documents. " \
            f"Test: {text1} != Expected: {text2}"

# At present odt puts the following metadata into the file:
#     InitialCreator: "msl-odt"
#     CreationDate: creation datetime in UTC with minute resolution
#     UserDefined: name = Title, text = document name


def test_metadata_creator():
    # Load both documents
    doc1 = load(TEST_FILE)
    doc2 = load(EXPECTED_FILE)

    # Retrieve creator metadata directly
    creator1 = doc1.meta.getElementsByType(InitialCreator)
    creator2 = doc2.meta.getElementsByType(InitialCreator)
    # Extract text from the generator element
    creator_text1 = creator1[0].firstChild.data if creator1 else ""
    creator_text2 = creator2[0].firstChild.data if creator2 else ""

    assert creator_text1 == creator_text2, \
        "Creator metadata fields do not match. " \
        f"Test: {creator_text1} != Expected: {creator_text2}"


def test_metadata_title():
    # Load both documents
    doc1 = load(TEST_FILE)
    doc2 = load(EXPECTED_FILE)

    # Locate the title metadata which is stored as UserDefined
    title1 = next((elem for elem in doc1.meta.getElementsByType(UserDefined)
                   if elem.getAttribute("name") == "Title"), None)
    title2 = next((elem for elem in doc2.meta.getElementsByType(UserDefined)
                   if elem.getAttribute("name") == "Title"), None)

    # Compare the titles
    title_text1 = title1.firstChild.data \
        if title1 and title1.firstChild else ""
    title_text2 = title2.firstChild.data \
        if title2 and title2.firstChild else ""
    assert title_text1 == title_text2, \
        "Title medata data fields do not match. " \
        f"Test: {title_text1} != Expected: {title_text2}"
